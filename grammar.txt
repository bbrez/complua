C Grammar

* program ::= declaration_list
* declaration_list ::= declaration | declaration_list declaration
* declaration ::= variable_declaration | function_declaration
* variable_declaration ::= type_specifier identifier ';'
* function_declaration ::= type_specifier identifier '(' [parameter_list] ')' compound_statement
* parameter_list ::= parameter | parameter_list ',' parameter
* parameter ::= type_specifier identifier
* compound_statement ::= '{' statement_list '}'
* statement_list ::= statement | statement_list statement
* statement ::= expression_statement | return_statement | variable_declaration | assignment_statement | if_statement | while_statement | for_statement
* if_statement ::= 'if' '(' expression ')' statement | 'if' '(' expression ')' statement 'else' statement
* while_statement ::= 'while' '(' expression ')' statement
* for_statement ::= 'for' '(' [expression] ';' [expression] ';' [expression] ')' statement
* expression_statement ::= expression ';'
* return_statement ::= 'return' expression ';'
* assignment_statement ::= identifier '=' expression ';'
* expression ::= logical_or_expression
* logical_or_expression ::= logical_and_expression | logical_or_expression '||' logical_and_expression
* logical_and_expression ::= equality_expression | logical_and_expression '&&' equality_expression
* equality_expression ::= relational_expression | equality_expression '==' relational_expression | equality_expression '!=' relational_expression
* relational_expression ::= additive_expression | relational_expression '<' additive_expression | relational_expression '>' additive_expression | relational_expression '<=' additive_expression | relational_expression '>=' additive_expression
* additive_expression ::= multiplicative_expression | additive_expression '+' multiplicative_expression | additive_expression '-' multiplicative_expression
* multiplicative_expression ::= unary_expression | multiplicative_expression '*' unary_expression | multiplicative_expression '/' unary_expression
* unary_expression ::= primary_expression | '-' unary_expression | '!' unary_expression | function_call
* function_call ::= identifier '(' [argument_list] ')'
* argument_list ::= expression | argument_list ',' expression
* primary_expression ::= identifier | literal | '(' expression ')'
* literal ::= INTEGER | FLOAT | CHAR | STRING
* identifier ::= ID
* type_specifier ::= 'int' | 'float' | 'char' | 'void'

ID ::= [a-zA-Z_][a-zA-Z0-9_]*
INTEGER ::= [0-9]+
FLOAT ::= [0-9]*\.[0-9]+
CHAR ::= '[a-zA-Z0-9]'
STRING ::= "[a-zA-Z0-9]*"
